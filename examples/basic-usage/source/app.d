module app;

import slf4d;
import slf4d.default_provider;

void main() {
	// This line shows how you'd configure your application's logging provider.
	// We're just using SLF4D's default provider, so this line could safely be
	// omitted.
	configureLoggingProvider(new shared DefaultProvider(true, Levels.INFO));

	// Obtain a Logger with the getLogger() function.
	auto log = getLogger();

	// Log some messages.
	log.info("This is an info message.");
	log.infoF!"An info message with some data: %d"(42);
	log.warn("A warning message.");
	log.error("An error message! Oh no!");
	import std.math : PI;
	log.errorF!"Another error message with some pi: %.6f"(PI);

	// By default, only INFO or higher messages will be logged.
	log.trace("This is a trace message. It won't show up by default unless the logger's level is set to TRACE.");
	log.debug_("Same with debug. Note that the method is \"debug_\", because \"debug\" is a D keyword.");
	
	// Because we are using the default provider, its LoggerFactory supports setting the log level.
	auto factory = cast(shared DefaultLoggerFactory) getLoggerFactory();
	factory.setRootLevel(Levels.TRACE);

	auto verboseLog = getLogger();
	verboseLog.trace("This trace message should show up.");
	verboseLog.debug_("This debug message should show up.");
	verboseLog.debugF!"This debug message will show up too! %s"("Test");

	// You can manually set the logger's name when you get it.
	auto otherLog = getLogger("custom-logger-name");
	otherLog.info("This message was generated by a logger with a custom name.");

	// You can also omit using a Logger entirely.
	info("This message was called from SLF4D's module scope.");
}
