/** 
 * The handler module defines the `LogHandler` interface, as well as several
 * simple handler implementations that can be used or extended by SLF4D
 * implementations.
 */
module slf4d.handler;

import slf4d.logger;

/** 
 * The interface for any component that consumes log messages generated by a
 * `Logger`. Only messages whose level is greater than or equal to the logger's
 * level will be sent to handlers. For example, a Logger configured at an INFO
 * log level will send INFO, WARN, and ERROR messages, but not DEBUG or TRACE.
 */
interface LogHandler {
    /** 
     * Handles a log message.
     * Params:
     *   msg = The log message that was generated.
     */
    void handle(LogMessage msg);
}

/** 
 * A log handler that simply appends all messages it receives to an internal
 * array. This can be useful for testing.
 */
class CachingLogHandler : LogHandler {
    public LogMessage[] messages;

    public void handle(LogMessage msg) {
        this.messages ~= msg;
    }
}

/** 
 * A very primitive log handler that writes messages to stdout. The exact
 * format is undefined, and this handler should **not** be used in production
 * applications.
 */
class StdoutLogHandler : LogHandler {
    import std.stdio;

    void handle(LogMessage msg) {
        writefln!"[logger=%s, module=%s, func=%s %s] %s: %s"(
            msg.loggerName,
            msg.context.moduleName,
            msg.context.functionName,
            msg.level.name,
            msg.timestamp.toISOExtString(),
            msg.message
        );
    }
}